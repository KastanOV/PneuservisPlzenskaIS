//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PneuservisISMVC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DefaultDataModel : DbContext
    {
        public DefaultDataModel()
            : base("name=DefaultDataModel")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<BazarTire> BazarTires { get; set; }
        public virtual DbSet<CarFleet> CarFleets { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<EmployeeAttendance> EmployeeAttendances { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<PriceHistory> PriceHistories { get; set; }
        public virtual DbSet<StoredWheelsDescription> StoredWheelsDescriptions { get; set; }
        public virtual DbSet<SuplierTiresOKpneu> SuplierTiresOKpneus { get; set; }
        public virtual DbSet<OrderSuplierTiresOKPneu> OrderSuplierTiresOKPneus { get; set; }
    
        public virtual int AttendanceArrival(Nullable<int> p_id)
        {
            var p_idParameter = p_id.HasValue ?
                new ObjectParameter("p_id", p_id) :
                new ObjectParameter("p_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttendanceArrival", p_idParameter);
        }
    
        public virtual int AttendanceExit(Nullable<int> p_id)
        {
            var p_idParameter = p_id.HasValue ?
                new ObjectParameter("p_id", p_id) :
                new ObjectParameter("p_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttendanceExit", p_idParameter);
        }
    
        public virtual int ContractArrival(Nullable<int> p_CustomerID, Nullable<int> p_EmployeesID, Nullable<short> p_GarageNumber)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            var p_EmployeesIDParameter = p_EmployeesID.HasValue ?
                new ObjectParameter("p_EmployeesID", p_EmployeesID) :
                new ObjectParameter("p_EmployeesID", typeof(int));
    
            var p_GarageNumberParameter = p_GarageNumber.HasValue ?
                new ObjectParameter("p_GarageNumber", p_GarageNumber) :
                new ObjectParameter("p_GarageNumber", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContractArrival", p_CustomerIDParameter, p_EmployeesIDParameter, p_GarageNumberParameter);
        }
    
        public virtual int ContractExit(Nullable<short> p_GarageNumber, Nullable<int> p_Payment, Nullable<bool> p_VAT)
        {
            var p_GarageNumberParameter = p_GarageNumber.HasValue ?
                new ObjectParameter("p_GarageNumber", p_GarageNumber) :
                new ObjectParameter("p_GarageNumber", typeof(short));
    
            var p_PaymentParameter = p_Payment.HasValue ?
                new ObjectParameter("p_Payment", p_Payment) :
                new ObjectParameter("p_Payment", typeof(int));
    
            var p_VATParameter = p_VAT.HasValue ?
                new ObjectParameter("p_VAT", p_VAT) :
                new ObjectParameter("p_VAT", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContractExit", p_GarageNumberParameter, p_PaymentParameter, p_VATParameter);
        }
    
        public virtual int EmployeeDetail(Nullable<int> p_ID, ObjectParameter p_wage, ObjectParameter p_Worktime)
        {
            var p_IDParameter = p_ID.HasValue ?
                new ObjectParameter("p_ID", p_ID) :
                new ObjectParameter("p_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeDetail", p_IDParameter, p_wage, p_Worktime);
        }
    
        public virtual int NewOrder(Nullable<int> p_CustomerID, Nullable<int> p_EmployeesID, string p_EAN, Nullable<int> p_ProductCount, Nullable<decimal> p_price)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            var p_EmployeesIDParameter = p_EmployeesID.HasValue ?
                new ObjectParameter("p_EmployeesID", p_EmployeesID) :
                new ObjectParameter("p_EmployeesID", typeof(int));
    
            var p_EANParameter = p_EAN != null ?
                new ObjectParameter("p_EAN", p_EAN) :
                new ObjectParameter("p_EAN", typeof(string));
    
            var p_ProductCountParameter = p_ProductCount.HasValue ?
                new ObjectParameter("p_ProductCount", p_ProductCount) :
                new ObjectParameter("p_ProductCount", typeof(int));
    
            var p_priceParameter = p_price.HasValue ?
                new ObjectParameter("p_price", p_price) :
                new ObjectParameter("p_price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewOrder", p_CustomerIDParameter, p_EmployeesIDParameter, p_EANParameter, p_ProductCountParameter, p_priceParameter);
        }
    
        public virtual int PayWages(Nullable<int> p_id)
        {
            var p_idParameter = p_id.HasValue ?
                new ObjectParameter("p_id", p_id) :
                new ObjectParameter("p_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayWages", p_idParameter);
        }
    
        public virtual int UpdateTires(string p_EAN, Nullable<decimal> p_NewPrice, Nullable<int> p_ExternalStore)
        {
            var p_EANParameter = p_EAN != null ?
                new ObjectParameter("p_EAN", p_EAN) :
                new ObjectParameter("p_EAN", typeof(string));
    
            var p_NewPriceParameter = p_NewPrice.HasValue ?
                new ObjectParameter("p_NewPrice", p_NewPrice) :
                new ObjectParameter("p_NewPrice", typeof(decimal));
    
            var p_ExternalStoreParameter = p_ExternalStore.HasValue ?
                new ObjectParameter("p_ExternalStore", p_ExternalStore) :
                new ObjectParameter("p_ExternalStore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTires", p_EANParameter, p_NewPriceParameter, p_ExternalStoreParameter);
        }
    }
}
